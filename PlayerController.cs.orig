using Godot;
using Godot.Collections;
using MineAndDine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using static Godot.TextServer;
using static MineAndDine.PickupObject;


public partial class PlayerController : CharacterBody3D
{
    [Export]
    public int mySpeed { get; set; } = 14;
    [Export]
    public float mySprintMultiplier { get; set; } = 1.5f;
    [Export]
    public float myGravity { get; set; } = 16;

    [Export]
    public float myReach { get; set; } = 16;
    [Export]
    public float myMiningRadius { get; set; } = 5;
    [Export]
    public float myMiningPower { get; set; } = 1;

    [Export(PropertyHint.Range, "0.f,1.f,0.01f")]
    float myCameraSensitivity = 0.01f;
    [Export(PropertyHint.Range, "0.f,360.f,1.f,radians_as_degrees")]
    float myCameraTiltLimit = Mathf.DegToRad(75);

    private Camera3D myCamera;
    private Node3D myCameraPivot;
    private TerrainGenerator myTerrainGenerator;
    public Node3D myHand { get; private set; }

    private Vector3 myTargetVelocity = Vector3.Zero;
    private bool myIsSprinting = false;
    private bool myIsHoldingObject = false; //Use func pls :)

    private PickupObject myHeldObject;

    // Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        myCameraPivot = GetNode<Node3D>("cameraPivot"); //Spawn this stuff instead?
        myCamera = GetNode<Camera3D>("cameraPivot/cameraArm/playerCamera");
        myTerrainGenerator = GetParent().GetNode<TerrainGenerator>("Terrain");

        myHand = GetNode<Node3D>("meshPivot/hand");

		Input.MouseMode = Input.MouseModeEnum.Captured;
	}

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    public override void _Process(double delta)
    {
        myTerrainGenerator.Touch(new Aabb(Position - new Vector3(10, 10, 10), new Vector3(20, 20, 20)));
    }

	public override void _PhysicsProcess(double delta)
    {
        if (Input.IsActionJustPressed("main_interact"))
            Interact((float)delta);

        if (Input.IsActionJustPressed("secondary_interact"))
            SecondaryInteract();

        Vector3 direction = HandleMovementInput();
        ApplyMovement(delta, direction);
    }

    private void ApplyMovement(double delta, Vector3 direction)
    {
        myTargetVelocity.X = direction.X * mySpeed * (myIsSprinting ? mySprintMultiplier : 1);
        myTargetVelocity.Z = direction.Z * mySpeed * (myIsSprinting ? mySprintMultiplier : 1);

        if (IsOnFloor())
        {
            if (myTargetVelocity.Y < 0.1f)
            {
                myTargetVelocity.Y = 0;
            }
            if (Input.IsActionPressed("jump"))
            {
                myTargetVelocity.Y = 5;
            }
        }
        else
        {
            myTargetVelocity.Y -= myGravity * (float)delta;
        }

        Velocity = myTargetVelocity;

        if (MoveAndSlide())
            HandleCollision();
    }

    private Vector3 HandleMovementInput()
    {
        var direction = Vector3.Zero;

        Vector3 camRot = myCamera.GetGlobalRotation();

        Vector3 forward = new Vector3(-(float)Mathf.Sin(camRot.Y), 0, -(float)Mathf.Cos(camRot.Y));
        Vector3 right = new Vector3(-(float)Mathf.Sin(camRot.Y - (Math.PI * 0.5f)), 0, -(float)Mathf.Cos(camRot.Y - (Math.PI * 0.5f)));

        if (Input.IsActionPressed("move_right"))
        {
            direction += right;
        }
        if (Input.IsActionPressed("move_left"))
        {
            direction -= right;
        }
        if (Input.IsActionPressed("move_back"))
        {
            direction -= forward;
        }
        if (Input.IsActionPressed("move_forward"))
        {
            direction += forward;
        }

        if (Input.IsActionJustPressed("sprint"))
        {
            myIsSprinting = !myIsSprinting;
        }
<<<<<<< HEAD
		if (direction != Vector3.Zero)
		{
			direction = direction.Normalized();
			// Setting the basis property will affect the rotation of the node.
			GetNode<Node3D>("meshPivot").Basis = Basis.LookingAt(direction);
		}
=======

        if (Input.IsActionJustPressed("main_interact"))
        {
            Interact();
        }
        if (Input.IsActionJustPressed("secondary_interact"))
        {
            if (IsHoldingObject())
            {
                DropHeldObject();
            }
        }
        if (direction != Vector3.Zero)
        {
            direction = direction.Normalized();

            // Setting the basis property will affect the rotation of the node.
            GetNode<Node3D>("meshPivot").Basis = Basis.LookingAt(direction);
        }
>>>>>>> 582aaf879dc903185a63b26ad21a23a9f19a5bc3

        if (direction.Dot(forward) < 0.2f)
        {
            myIsSprinting = false;
        }

        return direction;
    }

    public override void _UnhandledInput(InputEvent anEvent) //Is there no other way to capture mouse movement????
    {
        if (anEvent is InputEventKey keyEvent)
        {
            if (keyEvent.Pressed && keyEvent.Keycode == Key.Escape && OS.HasFeature("editor"))
            {
                GetTree().Quit();
            }

            if (keyEvent.Keycode == Key.Alt)
            {
                if (keyEvent.IsPressed())
                {
                    Input.MouseMode = Input.MouseModeEnum.Visible;
                }
                else
                {
                    Input.MouseMode = Input.MouseModeEnum.Captured;
                }
            }
        }

        if (Input.MouseMode == Input.MouseModeEnum.Captured)
        {
            if (anEvent is InputEventMouseMotion mouseEvent)
            {
                Vector3 cameraRot = myCameraPivot.GetRotation();

                cameraRot.X -= mouseEvent.GetRelative().Y * myCameraSensitivity;
                cameraRot.X = Mathf.Clamp(cameraRot.X, -myCameraTiltLimit, myCameraTiltLimit);
                cameraRot.Y -= mouseEvent.GetRelative().X * myCameraSensitivity;

                myCameraPivot.SetRotation(cameraRot);
            }
        }
    }

	private void Interact(float aDeltaTime)
    {
        if (IsHoldingObject())
        {
            if (myHeldObject is Tool)
            {
                (myHeldObject as Tool).Use();
            }

            return;
        }

<<<<<<< HEAD
        Dictionary intersect = RaycastMouse();

        if (intersect.Count == 0) // Empty dictionary means no collision
=======
        Dictionary intersection = DoRayCast(2);

        if (intersection.Count == 0) // Empty dictionary means no collision
        {
>>>>>>> 582aaf879dc903185a63b26ad21a23a9f19a5bc3
            return;

            

        if (intersect["collider"].Obj is PickupObject)
        {
            PickUpObj(intersect);
        }
<<<<<<< HEAD
        else
        {
            Mine(intersect);
        }

    }

    private void SecondaryInteract()
	{
        Dictionary intersect = RaycastMouse();

        if (intersect.Count == 0) // Empty dictionary means no collision
            return;

        Vector3 pos = (Vector3)intersect["position"];

        Aabb area = new Aabb(pos - new Vector3(myMiningRadius, myMiningRadius, myMiningRadius), new Vector3(myMiningRadius, myMiningRadius, myMiningRadius) * 2);

        foreach (Chunk chunk in myTerrainGenerator.AffectedChunks(area))
        {
            chunk.Update();
=======

    }

    public void Mine(Dictionary anIntersection)
    {
        Vector3 pos = ((Vector3)anIntersection["position"]);

        Aabb area = new Aabb(pos - new Vector3(myMiningRadius, myMiningRadius, myMiningRadius), new Vector3(myMiningRadius, myMiningRadius, myMiningRadius) * 2);

        myTerrainGenerator.Touch(area);

        float dist;
        float amount;

        foreach (Chunk chunk in myTerrainGenerator.AffectedChunks(area))
        {
            foreach (var (voxelPosition, voxel) in chunk.AffectedVoxels(area))
            {
                dist = pos.DistanceTo(voxelPosition);

                if (dist >= myMiningRadius)
                {
                    continue;
                }

                amount = Mathf.Min(myMiningPower * (1.0f - dist / myMiningRadius), voxel.myDirt);

                voxel.myDirt -= amount;
            }

            myTerrainGenerator.RegisterModification(chunk);
>>>>>>> 582aaf879dc903185a63b26ad21a23a9f19a5bc3
        }
    }

    private Dictionary RaycastMouse()
    {
        Vector2 mousePos = GetViewport().GetMousePosition();

		Vector3 origin = myCamera.ProjectRayOrigin(mousePos);

        PhysicsRayQueryParameters3D rayParams = new PhysicsRayQueryParameters3D();

		rayParams.From = origin;
		rayParams.To = origin + myCamera.ProjectRayNormal(mousePos) * myReach;
		rayParams.CollisionMask = 2;

        Dictionary intersect = GetWorld3D().DirectSpaceState.IntersectRay(rayParams);
        return intersect;
    }

    private void PickUpObj(Dictionary anIntersection)
    {
        PickupObject objToPickUp = (PickupObject)anIntersection["collider"].Obj;

        objToPickUp.PickUp(this);

        myHeldObject = objToPickUp;

        myIsHoldingObject = true;
    }

    private void DropHeldObject()
    {
        if (IsHoldingObject())
        {
            myHeldObject.Drop();
        }

        myIsHoldingObject = false;
    }

    public Dictionary DoRayCast(uint aCollisionMask)
    {
        Vector2 mousePos = GetViewport().GetMousePosition();

        Vector3 origin = myCamera.ProjectRayOrigin(mousePos);

        PhysicsRayQueryParameters3D rayParams = new PhysicsRayQueryParameters3D();

        rayParams.From = origin;
        rayParams.To = origin + myCamera.ProjectRayNormal(mousePos) * myReach;
        rayParams.CollisionMask = aCollisionMask;

        return GetWorld3D().DirectSpaceState.IntersectRay(rayParams); //https://github.com/godotengine/godot-docs-user-notes/discussions/100#discussioncomment-10655180 Probs won't matter tho
    }

    private void Mine(Dictionary anIntersection)
    {
        Vector3 pos = ((Vector3)anIntersection["position"]);

        Aabb area = new Aabb(pos - new Vector3(myMiningRadius, myMiningRadius, myMiningRadius), new Vector3(myMiningRadius, myMiningRadius, myMiningRadius) * 2);

        myTerrainGenerator.Touch(area);

        foreach (Chunk chunk in myTerrainGenerator.AffectedChunks(area))
        {
            foreach (Vector3I nodePos in chunk.AffectedNodes(area))
            {
                float dist = pos.DistanceTo(chunk.WorldPosFromVoxelPos(nodePos));

                if (dist >= myMiningRadius)
                        continue;
        
                ref MaterialsList node = ref chunk.NodeAt(nodePos);
        
                float amount = Mathf.Min(myMiningPower * (1.0f - dist / myMiningRadius), node[(int)MaterialType.Dirt]);

                node[(int)MaterialType.Dirt] -= amount;
            }
   

            chunk.Update();
            myTerrainGenerator.RegisterModification(chunk);
        }
    }

<<<<<<< HEAD
	private void HandleCollision()
	{
	}
=======
    public bool IsHoldingObject()
    {
        return (myHeldObject != null && myIsHoldingObject == true);
    }
>>>>>>> 582aaf879dc903185a63b26ad21a23a9f19a5bc3
}
